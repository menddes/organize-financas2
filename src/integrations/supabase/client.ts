
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Chaves para armazenamento local
const LOCAL_STORAGE_CONFIG_KEY = 'poupeja_supabase_config';
const LOCAL_STORAGE_FALLBACK_KEY = 'poupeja_supabase_fallback';

// Tentar obter valores das variáveis de ambiente primeiro
const ENV_URL = import.meta.env.VITE_SUPABASE_URL;
const ENV_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Variaveis fixa do Supabase
//const ENV_URL = 'https://seu-projeto.supabase.co';
//const ENV_KEY = 'sua-chave-anon-key';

// Valores padrão para primeira inicialização (não sensíveis)
// Estes valores serão substituídos pelas configurações do painel de administração
const FALLBACK_URL = 'http://localhost:54321'; // Alterado para um placeholder válido
const FALLBACK_KEY = 'placeholder.anon.key'; // Alterado para um placeholder válido

// Função para obter configurações (do localStorage, variáveis de ambiente ou valores padrão)
const getSupabaseConfig = () => {
  try {
    // Primeiro, usar as chaves fornecidas diretamente
    if (ENV_URL && ENV_KEY) {
      return {
        url: ENV_URL,
        key: ENV_KEY,
        isPlaceholder: false
      };
    }
    
    // Tentar obter configurações do localStorage
    const storedConfig = localStorage.getItem(LOCAL_STORAGE_CONFIG_KEY);
    if (storedConfig) {
      const config = JSON.parse(storedConfig);
      // Verificar se as configurações são válidas
      if (config.url && config.key) {
        return {
          url: config.url,
          key: config.key,
          isPlaceholder: false
        };
      }
    }
    
    // Tentar obter configurações de fallback (salvas pelo admin na primeira configuração)
    const fallbackConfig = localStorage.getItem(LOCAL_STORAGE_FALLBACK_KEY);
    if (fallbackConfig) {
      const config = JSON.parse(fallbackConfig);
      if (config.url && config.key) {
        return {
          url: config.url,
          key: config.key,
          isPlaceholder: false
        };
      }
    }
  } catch (error) {
    console.error('Erro ao carregar configurações do Supabase:', error);
  }

  // Retornar valores placeholder que serão substituídos após a configuração
  return {
    url: FALLBACK_URL,
    key: FALLBACK_KEY,
    isPlaceholder: true
  };
};

// Obter configurações iniciais
const initialConfig = getSupabaseConfig();

// Verificar se estamos usando configuração de placeholder
export const isUsingPlaceholderConfig = initialConfig.isPlaceholder;

// Criar cliente Supabase com as configurações obtidas
export const supabase = createClient<Database>(initialConfig.url, initialConfig.key);

// Exportar URL e chave para acesso público quando necessário
export const SUPABASE_URL = initialConfig.url;
export const SUPABASE_PUBLISHABLE_KEY = initialConfig.key;

// Função para atualizar o cliente Supabase com novas configurações
export const updateSupabaseClient = (url: string, key: string) => {
  try {
    // Validar as configurações
    if (!url || !key) {
      throw new Error('URL e chave do Supabase são obrigatórios');
    }

    // Salvar no localStorage para persistência
    localStorage.setItem(LOCAL_STORAGE_CONFIG_KEY, JSON.stringify({ url, key }));
    
    // Recarregar a página para aplicar as novas configurações
    window.location.reload();
    
    return true;
  } catch (error) {
    console.error('Erro ao atualizar cliente Supabase:', error);
    return false;
  }
};

// Função para salvar configurações de fallback (usada pelo admin na primeira configuração)
export const saveSupabaseFallbackConfig = (url: string, key: string) => {
  try {
    localStorage.setItem(LOCAL_STORAGE_FALLBACK_KEY, JSON.stringify({ url, key }));
    return true;
  } catch (error) {
    return false;
  }
};